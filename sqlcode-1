let
    Source = Sql.Database("CnameProdDBBI.tipalti.prod", "Tipalti", [Query="SELECT #(lf)payer.id payerId#(lf),payer.payerName#(lf),firstBillCreationDate = BillDate.min_creationDate#(lf),lastBillCreationDate = BillDate.max_creationDate#(lf),payer.invoiceRequired#(lf),thirdPartyApps#(lf),AvgLineCnt#(lf),MedianLineCnt#(lf),q75LineCnt#(lf),q90LineCnt#(lf),MaxLineCnt#(lf),billLineCustomFieldCnt#(lf),CASE WHEN applyRulesEngine.payerId IS NOT NULL THEN 'True' #(lf)#(tab)else 'False' end as ApplyRulesEngineForApprovalSequence_ML#(lf),ApproverVariationCnt #(lf)#(lf)--Payer params#(lf),CASE WHEN PAYERConfiguration.accountsPayableModuleEnabled = 0 THEN '-'#(lf)#(tab)WHEN defaultBillsFlow = 0 THEN 'SupplierInvoices'#(lf)#(tab)WHEN  defaultBillsFlow = 1 THEN 'NoApprovalFlow'#(lf)#(tab)WHEN  defaultBillsFlow = 2 THEN 'SelfBillingWithoutInternalApproval'#(lf)#(tab)WHEN defaultBillsFlow = 3 THEN 'SelfBillingWithInternalApproval' #(lf)#(tab)else '-' end as defaultBillsFlow#(lf),PAYERConfiguration.accountsPayableModuleEnabled as EnableBillsModule#(lf),CASE WHEN RolloutflagFXTrade.payerId IS NOT NULL AND RolloutflagUSDLiquidity.payerId IS NOT NULL AND routingSetupForPaypalMT.payerId IS NOT NULL THEN 'Fx Trade'#(lf)#(tab)WHEN RolloutflagFXTrade.payerId IS NULL and  RolloutflagUSDLiquidity.payerId IS NOT NULL AND routingSetupForPaypalMT.payerId IS NOT NULL THEN 'USD liquidity'#(lf)#(tab)WHEN RolloutflagFXTrade.payerId IS NULL AND RolloutflagUSDLiquidity.payerId IS NULL AND routingSetupForPaypalMT.payerId IS NOT NULL THEN 'Beta1'#(lf)#(tab)ELSE '-' end as PaypalMTflow#(lf),CASE WHEN paypalMt.payerId IS NOT NULL THEN 'PaypalMT' WHEN paypalAD.payerId IS NOT NULL THEN 'PaypalAD' #(lf)#(tab)ELSE '-' end as paypalConfig#(lf),CASE WHEN supplierInvoicesEnabled.payerID IS NOT NULL THEN 'True' #(lf)#(tab)ELSE 'False' end AS EnableSupplierInvoices#(lf),CASE WHEN selfBillingEnabled.payerID IS NOT NULL THEN 'True' #(lf)#(tab)ELSE 'False' end AS EnableSelfBillingFlow#(lf),PAYERConfiguration.invoicesAutoApprovedByPayee as EnableNoApprovalFlow#(lf),CASE WHEN billOcrEnabled.payerId Is NOT NULL THEN 'True' #(lf)#(tab)ELSE 'False' end as billOcrEnabled#(lf),CASE WHEN billsManagedServicesEnabled.payerId IS NOT NULL THEN 'True' #(lf)#(tab)ELSE 'False' END AS billsManagedServicesEnabled#(lf),CASE WHEN OCRAutoCaptureLinesEnabled.payerId is not null then 'True' #(lf)#(tab)ELSE 'False' END AS OCRAutoCaptureLinesEnabled#(lf),CASE WHEN EpEnabled.payerId is not null then 'True' #(lf)#(tab)ELSE 'False' END AS EpEnabled#(lf),CASE WHEN PayerEntity.entryCount>1 THEN 'True'#(lf)#(tab)ELSE 'False' END AS 'Is Multi-Entity'#(lf),CASE WHEN W9.payerId is not null then 'True' #(lf)#(tab)ELSE 'False' END AS 'Payer with W9 forms'#(lf),CASE WHEN W8.payerId is not null then 'True' #(lf)#(tab)ELSE 'False' END AS 'Payer with W8 forms'#(lf),CASE WHEN LocalTaxIDs.payerId is not null then 'True' #(lf)#(tab)ELSE 'False' END AS 'Payer with LocalTaxIDs'#(lf),PayerConfiguration.mtState as 'Payer mtState'#(lf),CASE WHEN PurchaseOrderMatching.payerId IS NULL THEN 'Disabled' #(lf)#(tab)WHEN PurchaseOrderMatching.payerId IS NOT NULL AND PayerConfiguration.purchaseOrderMatchingLevel=0 THEN '2-Way Allocation Flow'#(lf)#(tab)WHEN PurchaseOrderMatching.payerId IS NOT NULL AND  PayerConfiguration.purchaseOrderMatchingLevel=1 AND EnableGrnMatching.payerId IS NOT NULL THEN '3-Way Line Matching'#(lf)#(tab)WHEN PurchaseOrderMatching.payerId IS NOT NULL AND  PayerConfiguration.purchaseOrderMatchingLevel=1 THEN '2-Way Line Matching'#(lf)#(tab)ELSE NULL END AS POMatching#(lf)FROM PAYER#(lf)JOIN PAYERConfiguration#(lf)On payerconfiguration.payerId = payer.id#(lf)LEFT JOIN #(lf)(#(lf)#(tab)SELECT payerName, COUNT(*) billLineCustomFieldCnt#(lf)#(tab)FROM#(lf)#(tab)(#(lf)#(tab)#(tab)SELECT distinct payer.payerName, cf.*#(lf)#(tab)#(tab)FROM ApInvoiceLine_CustomField acf#(lf)#(tab)#(tab)JOIN CustomField cf#(lf)#(tab)#(tab)On acf.customFieldId = cf.id#(lf)#(tab)#(tab)JOIN APInvoiceLine apl#(lf)#(tab)#(tab)ON acf.apInvoiceLineId = apl.id#(lf)#(tab)#(tab)JOIN APInvoice ai#(lf)#(tab)#(tab)ON apl.apInvoiceId = ai.id#(lf)#(tab)#(tab)JOIN PAYER#(lf)#(tab)#(tab)On ai.payerId = payer.id#(lf)#(tab))q#(lf)#(tab)GROUP BY payerName#(lf))billLineCustomField#(lf)ON payer.payerName = billLineCustomField.payerName#(lf)LEFT JOIN(#(lf)#(tab)SELECT min(creationDate) as min_creationDate, max(creationDate) as max_creationDate, payerId#(lf)#(tab)FROM APInvoice#(lf)#(tab)GROUP BY payerId#(lf)#(tab)) BillDate#(lf)ON BillDate.payerId = payer.id#(lf)LEFT JOIN(#(lf)#(tab)SELECT payerId#(lf)#(tab)FROM PayerFeature#(lf)#(tab)WHERE payerFeature = 8#(lf)) billOcrEnabled#(lf)ON billOcrEnabled.payerId = payer.id#(lf)LEFT JOIN(#(lf)#(tab)SELECT payerId#(lf)#(tab)FROM PayerFeature#(lf)#(tab)WHERE payerFeature = 23#(lf)) billsManagedServicesEnabled#(lf)ON billsManagedServicesEnabled.payerId = payer.id#(lf)LEFT JOIN(#(lf)#(tab)SELECT payerId#(lf)#(tab)FROM PayerFeature#(lf)#(tab)WHERE payerFeature = 24#(lf)) OCRAutoCaptureLinesEnabled#(lf)ON OCRAutoCaptureLinesEnabled.payerId = payer.id#(lf)LEFT JOIN(#(lf)#(tab)SELECT payerId#(lf)#(tab)FROM PayerFeature#(lf)#(tab)WHERE payerFeature = 14#(lf)) supplierInvoicesEnabled#(lf)ON supplierInvoicesEnabled.payerId = payer.id#(lf)LEFT JOIN(#(lf)#(tab)SELECT payerId#(lf)#(tab)FROM PayerFeature#(lf)#(tab)WHERE payerFeature = 15#(lf)) selfBillingEnabled#(lf)ON selfBillingEnabled.payerId = payer.id#(lf)#(lf)---left join payer feature 63 + 64---#(lf)LEFT JOIN (#(lf)#(tab)SELECT payerId#(lf)#(tab)FROM PayerFeature#(lf)#(tab)WHERE payerFeature=63#(lf)) AS PurchaseOrderMatching#(lf)ON PurchaseOrderMatching.payerId=PayerConfiguration.PayerId#(lf)LEFT JOIN (#(lf)#(tab)SELECT payerId#(lf)#(tab)FROM PayerFeature#(lf)#(tab)WHERE payerFeature=64#(lf)) AS EnableGrnMatching#(lf)ON EnableGrnMatching.payerId=PayerConfiguration.PayerId#(lf)#(lf)LEFT JOIN#(lf)(#(lf)SELECT DISTINCT payerId,  AVG(cnt) OVER (Partition by payerId) as AvgLineCnt,#(lf)PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY cnt) OVER (PARTITION BY payerID) AS MedianLineCnt, #(lf)PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY cnt) OVER (PARTITION BY payerID) AS q75LineCnt, #(lf)PERCENTILE_CONT(0.9) WITHIN GROUP (ORDER BY cnt) OVER (PARTITION BY payerID) AS q90LineCnt, #(lf)MAX(cnt) OVER (Partition by payerId) as MaxLineCnt#(lf)FROM#(lf)(#(lf)#(tab)SELECT al.apInvoiceId, a.payerId, COUNT(*) cnt#(lf)#(tab)FROM ApInvoiceLine al#(lf)#(tab)JOIN ApInvoice a#(lf)#(tab)ON al.apInvoiceId = a.id#(lf)#(tab)where a.apstatus = 9#(lf)#(tab)GROUP BY al.apInvoiceId, a.payerId#(lf))q#(lf)) billLines#(lf)ON billLines.payerId = payer.id#(lf)LEFT JOIN#(lf)(#(lf)SELECT DISTINCT payerName, payerId,#(lf)STUFF((#(lf)SELECT DISTINCT ', ' + EnabledApps#(lf)FROM#(lf)(#(lf)#(tab)SELECT payeRName, payerId, #(lf)#(tab)EnabledApps = STUFF(#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)COALESCE(', ' + RTRIM(OracleEnabled), '')#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)+ COALESCE(', ' + RTRIM(NetSuiteEnabled), '')#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)+ COALESCE(', ' + RTRIM(HasOffersEnabled), '')#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)+ COALESCE(', ' + RTRIM(QuickbooksEnabled), '')#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)+ COALESCE(', ' + RTRIM(BentPixelsEnabled), '')#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)+ COALESCE(', ' + RTRIM(masterPayerName), ''), 1,2, '')#(lf)--#(tab)CONCAT(oracleEnabled,NetSuiteEnabled,HasOffersEnabled,QuickbooksEnabled, BentPixelsEnabled, masterPayerName) as EnabledApps#(lf)#(tab)FROM#(lf)#(tab)(#(lf)#(tab)#(tab)select payer.payerName, payer.id as payerId,#(lf)#(tab)#(tab)CASE WHEN pc.OracleReportsPushEnabled = 1 THEN 'Oracle' ELSE NULL end as OracleEnabled, #(lf)#(tab)#(tab)CASE WHEN NetSuite.thirdPartyAppId IS NOT NULL THEN 'NetSuite' ELSE NULL end as NetSuiteEnabled,#(lf)#(tab)#(tab)CASE WHEN HasOffers.thirdPartyAppId IS NOT NULL THEN 'HasOffers' ELSE NULL END AS HasOffersEnabled,#(lf)#(tab)#(tab)CASE WHEN Quickbooks.thirdPartyAppId IS NOT NULL THEN 'Quickbooks' ELSE NULL END AS QuickbooksEnabled,#(lf)#(tab)#(tab)CASE WHEN BentPixels.thirdPartyAppId IS NOT NULL THEN 'BentPixels' ELSE NULL END AS BentPixelsEnabled,#(lf)#(tab)#(tab)cakeTable.masterPayerName#(lf)#(tab)#(tab)from PayerConfiguration pc#(lf)#(tab)#(tab)JOIN PAyer#(lf)#(tab)#(tab)ON pc.payerId = Payer.id#(lf)#(tab)#(tab)LEFT JOIN (SELECT* FROM ThirdPartyApp_Payer WHERE thirdPartyAppId =1 and Enabled = 1) NetSuite#(lf)#(tab)#(tab)ON NetSuite.payerId = pc.payerId#(lf)#(tab)#(tab)LEFT JOIN (SELECT* FROM ThirdPartyApp_Payer WHERE thirdPartyAppId =2 and Enabled = 1) HasOffers#(lf)#(tab)#(tab)ON HasOffers.payerId = pc.payerId#(lf)#(tab)#(tab)LEFT JOIN (SELECT* FROM ThirdPartyApp_Payer WHERE thirdPartyAppId =3 and Enabled = 1) Quickbooks#(lf)#(tab)#(tab)ON Quickbooks.payerId = pc.payerId#(lf)#(tab)#(tab)LEFT JOIN (SELECT* FROM ThirdPartyApp_Payer WHERE thirdPartyAppId =5 and Enabled = 1) BentPixels#(lf)#(tab)#(tab)ON BentPixels.payerId = pc.payerId#(lf)#(tab)#(tab)LEFT JOIN#(lf)#(tab)#(tab)(#(lf)#(tab)#(tab)SELECT Payer.id as payerId, p2.payerName as masterPayerName#(lf)#(tab)#(tab)FROM Payer#(lf)#(tab)#(tab)JOIN Payer p2#(lf)#(tab)#(tab)ON payer.masterPayerId = p2.id#(lf)#(tab)#(tab)WHERE p2.payerName LIKE 'Cake%'#(lf)#(tab)#(tab)) cakeTable#(lf)#(tab)#(tab)on pc.payerId = cakeTable.payerId#(lf)#(tab)#(tab)WHERE pc.OracleReportsPushEnabled = 1 OR NetSuite.thirdPartyAppId IS NOT NULL OR HasOffers.thirdPartyAppId IS NOT NULL #(lf)#(tab)#(tab)OR Quickbooks.thirdPartyAppId IS NOT NULL OR BentPixels.thirdPartyAppId IS NOT NULL OR cakeTable.masterPayerName IS NOT NULL#(lf)#(tab))comb#(lf)) f2#(lf)WHERE f1.payerId = f2.payerId#(lf)FOR XML PATH('')), 1,1, '') as ThirdPartyApps#(lf)FROM #(lf)(#(lf)#(tab)SELECT payeRName, payerId, #(lf)#(tab)EnabledApps = STUFF(#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)COALESCE(', ' + RTRIM(OracleEnabled), '')#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)+ COALESCE(', ' + RTRIM(NetSuiteEnabled), '')#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)+ COALESCE(', ' + RTRIM(HasOffersEnabled), '')#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)+ COALESCE(', ' + RTRIM(QuickbooksEnabled), '')#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)+ COALESCE(', ' + RTRIM(BentPixelsEnabled), '')#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab)+ COALESCE(', ' + RTRIM(masterPayerName), ''), 1,2, '')#(lf)#(tab)FROM#(lf)#(tab)(#(lf)#(tab)#(tab)select payer.payerName, payer.id as payerId,#(lf)#(tab)#(tab)CASE WHEN pc.OracleReportsPushEnabled = 1 THEN 'Oracle' ELSE NULL end as OracleEnabled, #(lf)#(tab)#(tab)CASE WHEN NetSuite.thirdPartyAppId IS NOT NULL THEN 'NetSuite' ELSE NULL end as NetSuiteEnabled,#(lf)#(tab)#(tab)CASE WHEN HasOffers.thirdPartyAppId IS NOT NULL THEN 'HasOffers' ELSE NULL END AS HasOffersEnabled,#(lf)#(tab)#(tab)CASE WHEN Quickbooks.thirdPartyAppId IS NOT NULL THEN 'Quickbooks' ELSE NULL END AS QuickbooksEnabled,#(lf)#(tab)#(tab)CASE WHEN BentPixels.thirdPartyAppId IS NOT NULL THEN 'BentPixels' ELSE NULL END AS BentPixelsEnabled,#(lf)#(tab)#(tab)cakeTable.masterPayerName#(lf)#(tab)#(tab)from PayerConfiguration pc#(lf)#(tab)#(tab)JOIN PAyer#(lf)#(tab)#(tab)ON pc.payerId = Payer.id#(lf)#(tab)#(tab)LEFT JOIN (SELECT* FROM ThirdPartyApp_Payer WHERE thirdPartyAppId =1 and Enabled = 1) NetSuite#(lf)#(tab)#(tab)ON NetSuite.payerId = pc.payerId#(lf)#(tab)#(tab)LEFT JOIN (SELECT* FROM ThirdPartyApp_Payer WHERE thirdPartyAppId =2 and Enabled = 1) HasOffers#(lf)#(tab)#(tab)ON HasOffers.payerId = pc.payerId#(lf)#(tab)#(tab)LEFT JOIN (SELECT* FROM ThirdPartyApp_Payer WHERE thirdPartyAppId =3 and Enabled = 1) Quickbooks#(lf)#(tab)#(tab)ON Quickbooks.payerId = pc.payerId#(lf)#(tab)#(tab)LEFT JOIN (SELECT* FROM ThirdPartyApp_Payer WHERE thirdPartyAppId =5 and Enabled = 1) BentPixels#(lf)#(tab)#(tab)ON BentPixels.payerId = pc.payerId#(lf)#(tab)#(tab)LEFT JOIN#(lf)#(tab)#(tab)(#(lf)#(tab)#(tab)SELECT Payer.id as payerId, p2.payerName as masterPayerName#(lf)#(tab)#(tab)FROM Payer#(lf)#(tab)#(tab)JOIN Payer p2#(lf)#(tab)#(tab)ON payer.masterPayerId = p2.id#(lf)#(tab)#(tab)WHERE p2.payerName LIKE 'Cake%'#(lf)#(tab)#(tab)) cakeTable#(lf)#(tab)#(tab)on pc.payerId = cakeTable.payerId#(lf)#(tab)#(tab)WHERE pc.OracleReportsPushEnabled = 1 OR NetSuite.thirdPartyAppId IS NOT NULL OR HasOffers.thirdPartyAppId IS NOT NULL #(lf)#(tab)#(tab)OR Quickbooks.thirdPartyAppId IS NOT NULL OR BentPixels.thirdPartyAppId IS NOT NULL OR cakeTable.masterPayerName IS NOT NULL#(lf)#(tab))comb#(lf)) f1#(lf))a3#(lf)ON a3.payerId = payer.id#(lf)LEFT JOIN (SELECT * FROM FeatureRollout WHERE featureType = 35)applyRulesEngine#(lf)ON Payer.id = applyRulesEngine.payerId#(lf)LEFT JOIN#(lf)(#(lf)SELECT payerId, COUNT(*) as ApproverVariationCnt#(lf)FROM#(lf)(#(lf)SELECT DISTINCT payerId, actual#(lf)FROM MachineLearningPredictionLog m#(lf)JOIN APInvoice a#(lf)ON a.id = m.invoiceId#(lf)WHERE actual IS NOT null and defaultLogic = 0#(lf)and creationDate  >= DATEADD(day, -30, getdate())#(lf)) z#(lf)GROUP BY payerId#(lf))avc#(lf)ON payer.id = avc.payerId#(lf)LEFT JOIN#(lf)(#(lf)#(tab)SELECT payerId#(lf)#(tab)FROM FeatureRollout#(lf)#(tab)where featureType = 101#(lf)) RolloutflagFXTrade#(lf)ON payer.id = RolloutflagFXTrade.payerId#(lf)LEFT JOIN#(lf)(#(lf)#(tab)SELECT payerId#(lf)#(tab)FROM FeatureRollout#(lf)#(tab)where featureType = 98#(lf)) RolloutflagUSDLiquidity #(lf)ON payer.id = RolloutflagUSDLiquidity.payerId#(lf)LEFT JOIN#(lf)(#(lf)#(tab)SELECT payerId#(lf)#(tab)FROM ProviderRoutingConfiguration#(lf)#(tab)WHERE physicalAccountId = 86 and paymentProviderType = 5#(lf))routingSetUpForPaypalMT#(lf)ON payer.id = routingSetupForPaypalMT.payerId#(lf)LEFT JOIN #(lf)(#(lf)#(tab)select payerId from ProviderRoutingConfiguration where paymentMethod = 0 and paymentProviderType = 5#(lf)) paypalMT#(lf)ON payer.id = paypalMt.payerId#(lf)LEFT JOIN#(lf)(#(lf)#(tab)select payerId from ProviderRoutingConfiguration where paymentMethod = 0 and paymentProviderType = 2#(lf))paypalAd#(lf)ON payer.id = paypalAd.payerId#(lf)LEFT JOIN(#(lf)#(tab)SELECT payerId#(lf)#(tab)FROM PayerFeature#(lf)#(tab)WHERE payerFeature = 9#(lf)) EpEnabled#(lf)ON EpEnabled.payerId = payer.id#(lf)LEFT JOIN(#(lf)#(tab)select distinct#(lf)#(tab)payerId#(lf)#(tab),COUNT(*) OVER (PARTITION BY payerId) entryCount#(lf)#(tab)from PayerEntity#(lf)) PayerEntity#(lf)ON PayerEntity.payerId = payer.id#(lf)LEFT JOIN(#(lf)#(tab)select distinct#(lf)#(tab)payerId#(lf)#(tab)from PayerEntity#(lf)#(tab)WHERE taxFormFeatureType=1#(lf)) W9#(lf)ON W9.payerId = payer.id#(lf)LEFT JOIN(#(lf)#(tab)select distinct#(lf)#(tab)payerId#(lf)#(tab)from PayerEntity#(lf)#(tab)WHERE taxFormFeatureType=2#(lf)) W8#(lf)ON W8.payerId = payer.id#(lf)LEFT JOIN(#(lf)#(tab)select distinct#(lf)#(tab)payerId#(lf)#(tab)from PayerEntity#(lf)#(tab)WHERE taxFormFeatureType in (3,4,5,6)#(lf)) LocalTaxIDs#(lf)ON LocalTaxIDs.payerId = payer.id#(lf)#(lf)WHERE(payer.invoiceRequired = 1 OR PAYERConfiguration.accountsPayableModuleEnabled = 1)#(lf)#(lf)--OPTION (MAXDOP 4)#(lf)OPTION (RECOMPILE) ", CommandTimeout=#duration(0, 3, 0, 0)]),
    #"Added Conditional Column" = Table.AddColumn(Source, "Has NS or QB", each if [thirdPartyApps] = null then "No integration with NS/QB" else if Text.Contains([thirdPartyApps], "NetSuite") then "NetSuite" else if Text.Contains([thirdPartyApps], "Quickbooks") then "Quickbooks" else "No integration with NS/QB"),
    #"Merged Queries" = Table.NestedJoin(#"Added Conditional Column",{"payerId"},#"Payers to use Machine Learning",{"ParameterValue"},"Payers to use Machine Learning",JoinKind.LeftOuter),
    #"Expanded Payers to use Machine Learning" = Table.ExpandTableColumn(#"Merged Queries", "Payers to use Machine Learning", {"ParameterName"}, {"Payers to use Machine Learning.ParameterName"}),
    #"Added Conditional Column1" = Table.AddColumn(#"Expanded Payers to use Machine Learning", "Payers To Use Machine Learning Logs", each if [Payers to use Machine Learning.ParameterName] = null then false else if [Payers to use Machine Learning.ParameterName] = "Payers To Use Machine Learning" then true else false),
    #"Removed Columns" = Table.RemoveColumns(#"Added Conditional Column1",{"Payers to use Machine Learning.ParameterName"}),
    #"Changed Type" = Table.TransformColumnTypes(#"Removed Columns",{{"ApplyRulesEngineForApprovalSequence_ML", type logical}, {"Payers To Use Machine Learning Logs", type logical}}),
    #"Added Custom" = Table.AddColumn(#"Changed Type", "SetApproversByMachineLearning", each if ([Payers To Use Machine Learning Logs] =true and [ApplyRulesEngineForApprovalSequence_ML]=true ) then "Enabled" 
else if ( ([Payers To Use Machine Learning Logs] = false) and [ApplyRulesEngineForApprovalSequence_ML] = true) then "Learning"
else "Disabled"),
    #"Removed Duplicates" = Table.Distinct(#"Added Custom", {"payerId"})
in
    #"Removed Duplicates"
